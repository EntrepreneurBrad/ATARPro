[
  {
    "rule": "Always follow our Greenfield architecture: utils (pure), services (business logic), components (UI), store (Redux), types (shared)."
  },
  {
    "rule": "Do NOT call utils directly from components. Always go through a service."
  },
  {
    "rule": "Add this file header comment to all new files:\n// ATAR Calculator \u2013 Greenfield architecture: follow utils/services/components separation and avoid legacy patterns."
  },
  {
    "rule": "Use PascalCase for React components and camelCase for all functions, variables, and services."
  },
  {
    "rule": "Validation logic must be handled by validationService.ts. Use validateResult() for individual subject input."
  },
  {
    "rule": "Only use modern, TypeScript-first patterns. Avoid legacy patterns unless explicitly migrating old code."
  },
  {
    "rule": "Do not modify working logic unless the prompt explicitly asks for a refactor or change."
  },
  {
    "rule": "Ensure all functions in utils and services are unit tested with Vitest. Tests should live beside the file using .test.ts or .spec.ts."
  },
  {
    "rule": "Use mock data in tests \u2014 never real CSVs."
  },
  {
    "rule": "Write code that is modular, deterministic, and testable. Avoid side effects, magic values, and global state."
  },
  {
    "rule": "Follow the domain logic and business rules from dev_guide.md when writing or validating any logic."
  },
  {
    "rule": "If unsure about how to proceed, prefer clarity, modularity, and testability over cleverness or abstraction."
  },
  {
    "rule": "Use comments to explain 'why' something is done, not 'what'. Code should be self-explanatory for the 'what'."
  },
  {
    "rule": "Do not introduce third-party libraries unless explicitly requested."
  },
  {
    "rule": "React components live in src/components/. Logic goes in services/, not components."
  },
  {
    "rule": "Keep validation rules consistent with dev_guide.md and reflect CSV data structure where applicable."
  }
]